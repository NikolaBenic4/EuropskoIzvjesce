import React, { useState, useRef, useEffect } from "react";
import SignatureCanvas from "react-signature-canvas";
import Tesseract from "tesseract.js";
import "../css/PotpisForm.css";

const initialState = { potpis: null, datum_potpisa: null, iban_osiguranika: "", banka: "" };

function cleanIban(str) {
Â  if (!str) return "";
Â  return str
Â  Â  .replace(/[\s\-\.]/g, "")
Â  Â  .replace(/[OIlZBSGTQD]/gi, (c) =>
Â  Â  Â  ({ O: "0", I: "1", l: "1", Z: "2", B: "8", S: "5", G: "6", T: "7", D: "0", Q: "0" }[c] || c)
Â  Â  )
Â  Â  .toUpperCase();
}

function extractIban(text) {
Â  const m = text.match(/HR\d{19}/i);
Â  return m ? cleanIban(m[0]) : "";
}

export default function PotpisForm({ data, onNext, onBack, onChange }) {
Â  const [formData, setFormData] = useState(() => {
Â  Â  const saved = sessionStorage.getItem("PotpisFormData");
Â  Â  return saved ? JSON.parse(saved) : { ...initialState, ...(data || {}) };
Â  });
Â  const [errors, setErrors] = useState({});
Â  const [scanStatus, setScanStatus] = useState("");
Â  const [isScanning, setIsScanning] = useState(false);
Â  const sigRef = useRef();
Â  const imgRef = useRef();
Â  const containerRef = useRef();
Â  const [dims, setDims] = useState({ w: 400, h: 200 });

Â  useEffect(() => {
Â  Â  sessionStorage.setItem("PotpisFormData", JSON.stringify(formData));
Â  }, [formData]);

Â  useEffect(() => {
Â  Â  const initial = { ...initialState, ...(data || {}) };
Â  Â  setFormData((prev) => ({ ...initial, ...prev }));
Â  }, [data]);

Â  useEffect(() => {
Â  Â  const upd = () => {
Â  Â  Â  const w = Math.min(
Â  Â  Â  Â  (containerRef.current?.offsetWidth || 400) - 20,
Â  Â  Â  Â  window.innerWidth <= 600 ? 380 : 450
Â  Â  Â  );
Â  Â  Â  const h = window.innerWidth <= 600 ? 200 : 180;
Â  Â  Â  setDims({ w, h });
Â  Â  };
Â  Â  upd();
Â  Â  window.addEventListener("resize", upd);
Â  Â  return () => window.removeEventListener("resize", upd);
Â  }, []);

Â  const handleOCR = async (e) => {
Â  Â  const file = e.target.files?.[0];
Â  Â  if (!file || isScanning) return;
Â  Â  setIsScanning(true);
Â  Â  setScanStatus("Obrada slikeâ€¦");

Â  Â  try {
Â  Â  Â  const { data: { text } } = await Tesseract.recognize(file, "hrv");
Â  Â  Â  const iban = extractIban(text);
Â  Â  Â  if (iban) {
Â  Â  Â  Â  setFormData((f) => ({ ...f, iban_osiguranika: iban }));
Â  Â  Â  Â  setScanStatus("IBAN prepoznat: " + iban);
Â  Â  Â  } else {
Â  Â  Â  Â  setScanStatus("Nije pronaÄ‘en IBAN");
Â  Â  Â  }
Â  Â  } catch {
Â  Â  Â  setScanStatus("OCR greÅ¡ka");
Â  Â  } finally {
Â  Â  Â  setIsScanning(false);
Â  Â  Â  setTimeout(() => setScanStatus(""), 3000);
Â  Â  }
Â  };

Â  const saveSig = () => {
Â  Â  if (sigRef.current.isEmpty()) return;
Â  Â  const canvas = sigRef.current.getCanvas();
Â  Â  const url = canvas.toDataURL("image/png");
Â  Â  setFormData((f) => ({ ...f, potpis: url, datum_potpisa: new Date().toISOString() }));
Â  };

Â  const clearSig = () => {
Â  Â  sigRef.current.clear();
Â  Â  setFormData((f) => ({ ...f, potpis: null, datum_potpisa: null }));
Â  };

Â  useEffect(() => {
Â  Â  let iban = formData.iban_osiguranika.replace(/\s+/g, "").replace(/-/g, "");
Â  Â  if (/^HR\d{19}$/.test(iban) && !isScanning) {
Â  Â  Â  fetch(`/api/banka/banka-za-iban?iban=${iban}`, {
Â  Â  Â  Â  headers: { "Content-Type": "application/json", "x-api-key": import.meta.env.VITE_API_KEY }
Â  Â  Â  })
Â  Â  Â  Â  .then((r) => (r.ok ? r.json() : Promise.reject()))
Â  Â  Â  Â  .then((j) => setFormData((f) => ({ ...f, banka: j.naziv_banke || "" })))
Â  Â  Â  Â  .catch(() => setFormData((f) => ({ ...f, banka: "" })));
Â  Â  }
Â  }, [formData.iban_osiguranika, isScanning]);

Â  const handleSubmit = (e) => {
Â  Â  e.preventDefault();
Â  Â  const errs = {};
Â  Â  if (!formData.potpis) errs.potpis = "Potpis je obavezan.";
Â  Â  if (!/^HR\d{19}$/.test(formData.iban_osiguranika)) errs.iban_osiguranika = "Neispravan IBAN";
Â  Â  setErrors(errs);
Â  Â  if (Object.keys(errs).length) return;
Â  Â  onChange?.(formData);
Â  Â  onNext?.(formData);
Â  };

Â  const handleBack = () => {
Â  Â  onBack?.();
Â  };

Â  return (
Â  Â  <form className="potpis-form" onSubmit={handleSubmit}>
Â  Â  Â  <h2 className="form-label" style={{ textAlign: "center" }}>
Â  Â  Â  Â  Potpis i podaci o banci
Â  Â  Â  </h2>

Â  Â  Â  <div className="form-group" ref={containerRef}>
Â  Â  Â  Â  <label className="form-label">Potpis:</label>
Â  Â  Â  Â  <div className="signature-box">
Â  Â  Â  Â  Â  <SignatureCanvas
Â  Â  Â  Â  Â  Â  ref={sigRef}
Â  Â  Â  Â  Â  Â  penColor="#002060"
Â  Â  Â  Â  Â  Â  minWidth={1}
Â  Â  Â  Â  Â  Â  maxWidth={2}
Â  Â  Â  Â  Â  Â  canvasProps={{
Â  Â  Â  Â  Â  Â  Â  id: "signatureInput",
Â  Â  Â  Â  Â  Â  Â  width: dims.w,
Â  Â  Â  Â  Â  Â  Â  height: dims.h,
Â  Â  Â  Â  Â  Â  Â  className: "sigCanvas",
Â  Â  Â  Â  Â  Â  Â  style: { touchAction: "none", width: `${dims.w}px`, height: `${dims.h}px` }
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  onEnd={saveSig}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <button type="button" className="clear-button" onClick={clearSig} disabled={isScanning}>
Â  Â  Â  Â  Â  OBRIÅ I POTPIS
Â  Â  Â  Â  </button>
Â  Â  Â  Â  {errors.potpis && <div className="error-message">{errors.potpis}</div>}
Â  Â  Â  </div>

Â  Â  Â  <div className="form-group scan-group">
Â  Â  Â  Â  <label className="form-label">IBAN za isplatu:</label>
Â  Â  Â  Â  <div className="camera-note">Molimo usmjerite kameru na IBAN na kartici</div>
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  className={`form-input${errors.iban_osiguranika ? " input-error" : ""}`}
Â  Â  Â  Â  Â  name="iban_osiguranika"
Â  Â  Â  Â  Â  value={formData.iban_osiguranika}
Â  Â  Â  Â  Â  onChange={(e) => setFormData((f) => ({ ...f, iban_osiguranika: e.target.value }))}
Â  Â  Â  Â  Â  disabled={isScanning}
Â  Â  Â  Â  />
Â  Â  Â  Â  {errors.iban_osiguranika && <div className="error-message">{errors.iban_osiguranika}</div>}
Â  Â  Â  Â  <button type="button" className="scan-button" onClick={() => imgRef.current.click()} disabled={isScanning}>
Â  Â  Â  Â  Â  ðŸ“· {isScanning ? "ObraÄ‘ujem..." : "Skener IBAN"}
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  ref={imgRef}
Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  capture="environment"
Â  Â  Â  Â  Â  style={{ display: "none" }}
Â  Â  Â  Â  Â  onChange={handleOCR}
Â  Â  Â  Â  />
Â  Â  Â  Â  {scanStatus && <div className="status">{scanStatus}</div>}
Â  Â  Â  </div>

Â  Â  Â  <div className="form-group">
Â  Â  Â  Â  <label className="form-label">Naziv banke:</label>
Â  Â  Â  Â  <input readOnly className="form-input" value={formData.banka || ""} placeholder="Automatski detektirana banka" />
Â  Â  Â  </div>

Â  Â  Â  <div className="navigation-buttons">
Â  Â  Â  Â  {onBack && (
Â  Â  Â  Â  Â  <button type="button" className="back-button" onClick={handleBack} disabled={isScanning}>
Â  Â  Â  Â  Â  Â  NAZAD
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  )}
Â  Â  Â  Â  <button type="submit" className="next-button" disabled={isScanning}>
Â  Â  Â  Â  Â  DALJE
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  </form>
Â  );
}
